package com.eiw.alerts;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.SortedMap;

import com.eiw.device.handler.MeiTrackDeviceHandler;
import com.eiw.server.TimeZoneUtil;
import com.eiw.server.fleettrackingpu.Alertconfig;
import com.eiw.server.fleettrackingpu.AlertconfigId;
import com.eiw.server.fleettrackingpu.Freeformgeo;
import com.eiw.server.fleettrackingpu.Vehicle;
import com.eiw.server.fleettrackingpu.VehicleHasFreeform;
import com.eiw.server.fleettrackingpu.Vehiclealerts;
import com.eiw.server.fleettrackingpu.Vehicleevent;

public class CheckFreeFormGeo {
	AlertsEJBRemote alertsEJBRemote = null;
	AlertsManager alertsManager;
	List<Vehicleevent> vehicleevents;
	List<VehicleHasFreeform> vehicleHasFreeform = null;
	Map<Integer, Boolean> prevHMap = null, currHMap = null;
	Map<Integer, Freeformgeo> geoMap = null;
	String plateNo, vin, type;
	Vehicle vehicleDetail;
	List<Vehiclealerts> vehiclealerts = null;
	boolean validity = false;
	private static final String EMPLOYEE = "Employee";

	public CheckFreeFormGeo(AlertsManager alertsManager1) {
		alertsManager = alertsManager1;
		alertsEJBRemote = alertsManager.alertsEJBRemote;
	}

	public void manageAlert(List<Vehicleevent> vehicleevents1, Vehicle vehicle,
			String plateNo1, String timeZone, String mode) {

		plateNo = plateNo1;
		vin = vehicle.getVin();
		type = vehicle.getVehicletype().getVehicleType();
		vehicleDetail = vehicle;
		vehicleevents = vehicleevents1;
		Vehicleevent prevVE = null;
		int i;

		// Getting Geozones Associated for this Vehicle
		vehicleHasFreeform = alertsEJBRemote.getFreeformGeoConfig(vin, mode);
		if (vehicleHasFreeform.isEmpty()) {
			return;
		}
		// Getting GeoId, Geozone
		geoMap = getGeozoneDetail(vehicleHasFreeform);

		List<Date> dates = new ArrayList<Date>();
		for (Vehicleevent evt : vehicleevents) {
			dates.add(evt.getId().getEventTimeStamp());
		}
		Collections.sort(dates);
		// Need to be uncommented during testing with simulator in local
		// Vehicleevent prevVE = alertsEJBRemote.getGeoPrevVe(vin);
		if (mode != null) {
			prevVE = vehicleevents.get(0);
			i = 1;
		} else {
			prevVE = MeiTrackDeviceHandler.getPrevVE(vin);
			i = 0;
		}
		if (prevVE == null) {
			return;
		}
		prevHMap = getGeoStatusHashMap(prevVE);
		if (prevHMap.isEmpty()) {
			return;
		}

		for (; i < dates.size(); i++) {
			Vehicleevent currVE = null;
			if (mode != null) {
				currVE = vehicleevents.get(i);
			} else {
				currVE = getVE(dates.get(i));

				// omitting older records coming in Transmission
				Date currDate = currVE.getId().getEventTimeStamp();
				Date prevDate = prevVE.getId().getEventTimeStamp();
				if (currDate.getTime() < prevDate.getTime()) {
					continue;
				}
			}

			currHMap = getGeoStatusHashMap(currVE);
			prepareAlert(currHMap, prevHMap, currVE, timeZone, mode);
			prevVE = currVE;
			prevHMap = currHMap;
		}

	}

	private Vehicleevent getVE(Date date) {
		for (Vehicleevent ve : vehicleevents) {
			long a = ve.getId().getEventTimeStamp().getTime();
			long b = date.getTime();
			if (a == b) {
				return ve;
			}
		}
		return null;
	}

	private Map<Integer, Boolean> getGeoStatusHashMap(Vehicleevent evt) {
		Map<Integer, Boolean> hashMap = new HashMap<Integer, Boolean>();
		for (int i = 0; i < vehicleHasFreeform.size(); i++) {
			int id = vehicleHasFreeform.get(i).getId().getFreeformid();
			boolean status = alertsEJBRemote.getFreeformGeoStatus(evt, id);
			hashMap.put(id, status);
		}
		return hashMap;
	}

	private void prepareAlert(Map<Integer, Boolean> currHMap,
			Map<Integer, Boolean> prevHMap, Vehicleevent currVE,
			String timeZone, String mode) {
		int today;
		boolean curTime;
		String description;
		// String timeZone = alertsEJBRemote.getTimeZoneRegion(vin);
		for (Map.Entry<Integer, Boolean> preMap : prevHMap.entrySet()) {
			List<Vehicleevent> vehicleeventList = new ArrayList<Vehicleevent>();
			if (preMap.getValue() != currHMap.get(preMap.getKey())) {
				VehicleHasFreeform vhg = getVhgFromGeozoneId(preMap.getKey());
				boolean onLeave = vhg.getOnLeave();
				boolean onEnter = vhg.getOnEnter();
				String mobile = vhg.getMobileNumber();
				Freeformgeo freeformgeo = geoMap.get(preMap.getKey());
				// Date and Time Check
				SortedMap<Integer, Boolean> getDay = alertsEJBRemote
						.getDayAlert(vhg.getAlertDay());
				today = alertsEJBRemote.getDay(currVE.getId()
						.getEventTimeStamp(), timeZone);
				vehicleeventList.add(currVE);
				curTime = alertsEJBRemote.getTime(vehicleeventList,
						vhg.getAlertTime());
				if (vhg.getValidityExp() != null) {
					validity = alertsEJBRemote.getValidity(vehicleeventList,
							vhg.getValidityExp());
				} else {
					validity = true;
				}
				if (mode != null ? ((curTime) && (validity)) : ((getDay
						.get(today)) && (curTime) && (validity))) {
					if (!preMap.getValue()) {
						if (onEnter) {
							String eventTime = TimeZoneUtil
									.getStrTZDateTime(currVE.getId()
											.getEventTimeStamp());
							if (type.equalsIgnoreCase(EMPLOYEE)) {
								description = "Alert%0DType : WorkZone - OnEnter%0DEmployee:"
										+ plateNo
										+ " Workzone Name:%0D"
										+ freeformgeo.getGeoname()
										+ "%0DTime:"
										+ eventTime;
							} else {
								description = "Alert%0DType : FreeFormGeo - OnEnter Alert%0Dvehicle:"
										+ plateNo
										+ " Geo Name:%0D"
										+ freeformgeo.getGeoname()
										+ "%0DTime:"
										+ eventTime;
							}

							Vehiclealerts va = new Vehiclealerts();
							va.setAlerttype(AlertsManager.enumAlerts.ONENTER
									.name());
							va.setSubalerttype(AlertsManager.enumAlerts.GEOFREE
									.name());
							va.setDescription(description);
							va.setEventTimeStamp(currVE.getId()
									.getEventTimeStamp());
							va.setLatlng(currVE.getLatitude() + ","
									+ currVE.getLongitude());
							va.setSmsmobile(mobile);
							va.setVin(vin);
							va.setShowstatus(false);

							Alertconfig alertConfig = new Alertconfig();
							alertConfig.setSmsNumber(vhg.getMobileNumber()
									+ "#" + vhg.getMobileNumber1());
							alertConfig.setThroughSms(""
									+ (vhg.getSmsThrough() ? 1 : 0) + "#" + ""
									+ (vhg.getSmsThrough1() ? 1 : 0));
							alertConfig.setEmailAddress(vhg.getEmailAddress()
									+ "#" + vhg.getEmailAddress1());
							alertConfig.setThroughEmail(""
									+ (vhg.getThroughEmail() ? 1 : 0) + "#"
									+ "" + (vhg.getThroughEmail1() ? 1 : 0));

							AlertconfigId id = new AlertconfigId();
							id.setCompanyId(vehicleDetail.getCompanyId());
							id.setBranchId(vehicleDetail.getBranchId());
							id.setUserId(vhg.getLastUpdBy());
							id.setVin(vehicleDetail.getVin());
							id.setAlertType(va.getAlerttype());
							alertConfig.setId(id);
							vehiclealerts = new ArrayList<Vehiclealerts>();
							vehiclealerts.add(va);
							alertsManager.persistVehicleAlert(alertConfig,
									vehiclealerts, mode);

						}
					} else {
						if (onLeave) {
							String eventTime = TimeZoneUtil
									.getStrTZDateTime(currVE.getId()
											.getEventTimeStamp());
							if (type.equalsIgnoreCase(EMPLOYEE)) {
								description = "Alert%0DType : WorkZone - OnLeave%0DEmployee:"
										+ plateNo
										+ " Workzone Name:%0D"
										+ freeformgeo.getGeoname()
										+ "%0DTime:"
										+ eventTime;
							} else {
								description = "Alert%0DType : FreeFormGeo - OnLeave Alert%0Dvehicle:"
										+ plateNo
										+ " Geo Name:%0D"
										+ freeformgeo.getGeoname()
										+ "%0DTime:"
										+ eventTime;
							}
							Vehiclealerts va = new Vehiclealerts();
							va.setAlerttype(AlertsManager.enumAlerts.ONLEAVE
									.name());
							va.setSubalerttype(AlertsManager.enumAlerts.GEOFREE
									.name());
							va.setDescription(description);
							va.setEventTimeStamp(currVE.getId()
									.getEventTimeStamp());
							va.setLatlng(currVE.getLatitude() + ","
									+ currVE.getLongitude());
							va.setSmsmobile(mobile);
							va.setVin(vin);
							va.setShowstatus(false);

							Alertconfig alertConfig = new Alertconfig();
							alertConfig.setSmsNumber(vhg.getMobileNumber()
									+ "#" + vhg.getMobileNumber1());
							alertConfig.setThroughSms(""
									+ (vhg.getSmsThrough() ? 1 : 0) + "#" + ""
									+ (vhg.getSmsThrough1() ? 1 : 0));
							alertConfig.setEmailAddress(vhg.getEmailAddress()
									+ "#" + vhg.getEmailAddress1());
							alertConfig.setThroughEmail(""
									+ (vhg.getThroughEmail() ? 1 : 0) + "#"
									+ "" + (vhg.getThroughEmail1() ? 1 : 0));
							AlertconfigId id = new AlertconfigId();
							id.setCompanyId(vehicleDetail.getCompanyId());
							id.setBranchId(vehicleDetail.getBranchId());
							id.setUserId(vhg.getLastUpdBy());
							id.setVin(vehicleDetail.getVin());
							id.setAlertType(va.getAlerttype());
							alertConfig.setId(id);
							vehiclealerts = new ArrayList<Vehiclealerts>();
							vehiclealerts.add(va);
							alertsManager.persistVehicleAlert(alertConfig,
									vehiclealerts, mode);
						}
					}
				}
			}
		}
	}

	private Map<Integer, Freeformgeo> getGeozoneDetail(
			List<VehicleHasFreeform> vehicleHasFreeform) {
		Map<Integer, Freeformgeo> map = new HashMap<Integer, Freeformgeo>();
		for (int i = 0; i < vehicleHasFreeform.size(); i++) {
			int id = vehicleHasFreeform.get(i).getId().getFreeformid();
			map.put(id, alertsEJBRemote.getFreeformGeo(id));
		}
		return map;
	}

	private VehicleHasFreeform getVhgFromGeozoneId(int id) {
		for (int i = 0; i < vehicleHasFreeform.size(); i++) {
			if (id == vehicleHasFreeform.get(i).getId().getFreeformid()) {
				return vehicleHasFreeform.get(i);
			}
		}
		return null;
	}
}