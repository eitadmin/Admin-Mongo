package com.eiw.device.handler;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.Socket;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.jboss.logging.Logger;
import org.json.JSONArray;
import org.json.JSONObject;

import com.eiw.device.deepseaV2.DeepSeaByteWrapperV2;
import com.eiw.device.ejb.FleetTrackingDeviceListenerBORemote;
import com.eiw.device.ejb.VehicleComposite;
import com.eiw.device.handler.method.SKTHandlerMethods;
import com.eiw.device.listener.ListenerStarter;
import com.eiw.server.TimeZoneUtil;
import com.eiw.server.bo.BOFactory;
import com.eiw.server.fleettrackingpu.Vehicle;
import com.eiw.server.fleettrackingpu.Vehicleevent;
import com.eiw.server.fleettrackingpu.VehicleeventId;

public class DeepseaDeviceHandlerV2 extends DeviceHandler {

	private static final Logger LOGGER = Logger.getLogger("listener");

	FleetTrackingDeviceListenerBORemote fleetTrackingDeviceListenerBO = BOFactory
			.getFleetTrackingDeviceListenerBORemote();

	public static Map<String, List<DeepSeaByteWrapperV2>> avlDataMap = new HashMap<String, List<DeepSeaByteWrapperV2>>();
	public static String commandStatus;
	private SKTHandlerMethods sktHandlerMethods;
	public static Map<String, Integer> configCnt = new HashMap<String, Integer>();;

	@Override
	protected void handleDevice() {
		LOGGER.info("Entered DeepSeaV2 five mins Handle Device:" + new Date());
		sktHandlerMethods = new SKTHandlerMethods();
		DataInputStream clientSocketDis = null;
		DataOutputStream dos = null;

		try {
			clientSocket.setSoTimeout(1500000);
			clientSocketDis = new DataInputStream(clientSocket.getInputStream());
			dos = new DataOutputStream(clientSocket.getOutputStream());
			DeepSeaByteWrapperV2 data = new DeepSeaByteWrapperV2(
					clientSocketDis);
			data.unwrapDataFromStream();
			String imeiNo = data.getImei();
			super.deviceImei = imeiNo;
			VehicleComposite vehicleComposite = fleetTrackingDeviceListenerBO
					.getVehicle(imeiNo);
			if (vehicleComposite == null) {
				LOGGER.error("DeepSeaDeviceHandlerV2: handleDevice: Received IMEI No is invalid... returning... "
						+ imeiNo);
				return;
			}
			ListenerStarter.deepseaDeviceHandlerV2Map.put(deviceImei, this);
			if (commandStatus != null && commandStatus.equalsIgnoreCase("RQ")) {
				sendAirCommand(vehicleComposite, 0);
			} else if (commandStatus != null
					&& commandStatus.equalsIgnoreCase("CONFIG")) {
				sendAirCommand(vehicleComposite, data.getModbusData()
						.getAckref());
			} else {
				insertService(data, vehicleComposite,
						fleetTrackingDeviceListenerBO);
				// configCnt.put(vehicleComposite.getVehicle().getVin(), 4);
				checkConfigDataLength(imeiNo);

			}
			while (true) {
				DeepSeaByteWrapperV2 rawData = new DeepSeaByteWrapperV2(
						clientSocketDis);
				rawData.unwrapDataFromStream();
				LOGGER.info("Entered while");
				if (ListenerStarter.deepseaDeviceHandlerV2Map.get(deviceImei) == null) {
					LOGGER.info("No Handler Found for IMEI NO: " + deviceImei);
					ListenerStarter.deepseaDeviceHandlerV2Map.put(deviceImei,
							this);
				}
				if (commandStatus != null
						&& commandStatus.equalsIgnoreCase("RQ")) {
					sendAirCommand(vehicleComposite, 0);
				} else if (commandStatus != null
						&& commandStatus.equalsIgnoreCase("CONFIG")) {
					sendAirCommand(vehicleComposite, rawData.getModbusData()
							.getAckref());
				} else {
					insertService(rawData, vehicleComposite,
							fleetTrackingDeviceListenerBO);
					// configCnt.put(vehicleComposite.getVehicle().getVin(), 4);
					checkConfigDataLength(imeiNo);

				}
			}
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {
			if (deviceImei != null) {
				ListenerStarter.deepseaDeviceHandlerV2Map.remove(deviceImei);
			}
			cleanUpSockets(clientSocket, clientSocketDis, dos);
			LOGGER.info("DeepSeaDeviceHandlerV2 DeviceCommunicatorThread:DeviceCommunicator Completed");
		}

	}

	private void insertService(DeepSeaByteWrapperV2 rawData,
			VehicleComposite vehicleComposite,
			FleetTrackingDeviceListenerBORemote fleetTrackingDeviceListenerBO) {
		try {
			LOGGER.info("Entered insert service");
			Vehicle vehicle = vehicleComposite.getVehicle();
			Vehicleevent vehicleEvent = prepareVehicleEvents(vehicle, rawData,
					fleetTrackingDeviceListenerBO);
			List<Vehicleevent> vehicleEvents = new ArrayList<Vehicleevent>();
			if (vehicleEvent != null)
				vehicleEvents.add(vehicleEvent);
			if (!vehicleEvents.isEmpty() && vehicleEvents.size() != 0) {
				for (Vehicleevent vehicleevent : vehicleEvents) {
					sktHandlerMethods.persistEventAndGenerateAlert(null,
							vehicleComposite, rawData.getImei(), "deepsea",
							vehicleevent);
				}
			}
		} catch (Exception e) {
			LOGGER.error("Exception while persisting data :: " + e);
		}
	}

	private Vehicleevent prepareVehicleEvents(Vehicle vehicle,
			DeepSeaByteWrapperV2 avlData,
			FleetTrackingDeviceListenerBORemote fleetTrackingDeviceListenerBO) {
		Vehicleevent vehicleEvent = new Vehicleevent();
		try {
			String region = fleetTrackingDeviceListenerBO
					.getTimeZoneRegion(vehicle.getVin());
			VehicleeventId vehicleeventId = new VehicleeventId();
			LOGGER.info("Deepsea Modbus: " + avlData.getModbusData());
			LOGGER.info("Deepsea Gettime: "
					+ avlData.getModbusData().getDateTime());
			vehicleeventId.setEventTimeStamp(avlData.getModbusData()
					.getDateTime());
			vehicleEvent.setServerTimeStamp(TimeZoneUtil.getDateInTimeZone());
			vehicleeventId.setVin(vehicle.getVin());
			vehicleEvent.setId(vehicleeventId);

			if (avlData.getModbusData().getDataType().equalsIgnoreCase("logIn")) {
				vehicleEvent.setDi1(Integer.parseInt(avlData.getModbusData()
						.getDIP1()));
				vehicleEvent.setDi2(Integer.parseInt(avlData.getModbusData()
						.getDIP2()));
				vehicleEvent.setDi3(Integer.parseInt(avlData.getModbusData()
						.getDOP1()));
				vehicleEvent.setDi4(Integer.parseInt(avlData.getModbusData()
						.getDOP2()));

				vehicleEvent.setAi1(Double.valueOf(
						avlData.getModbusData().getAIP1()).intValue());
				vehicleEvent.setAi2(Double.valueOf(
						avlData.getModbusData().getAIP2()).intValue());
				vehicleEvent.setAi3(Double.valueOf(
						avlData.getModbusData().getAIP3()).intValue());
				vehicleEvent.setAi4(Double.valueOf(
						avlData.getModbusData().getAIP4()).intValue());
				JSONObject metaData = new JSONObject();
				metaData.put("statusBit", avlData.getModbusData()
						.getStatusBit());
				metaData.put("latDir", avlData.getModbusData().getLatDir());
				metaData.put("longDir", avlData.getModbusData().getLongDir());
				metaData.put("headDegree", avlData.getModbusData()
						.getHeadDegree());
				metaData.put("noOfSatlite", avlData.getModbusData()
						.getNoOfSatlite());
				metaData.put("gpsAltitude", avlData.getModbusData()
						.getGpsAltitude());
				metaData.put("operator", avlData.getModbusData().getOperator());
				metaData.put("gsmSignal", avlData.getModbusData()
						.getGsmSignal());
				metaData.put("mainPower", avlData.getModbusData()
						.getMainPower());
				metaData.put("mainInputVoltage", avlData.getModbusData()
						.getMainInputVoltage());
				metaData.put("internalBatVolt", avlData.getModbusData()
						.getInternalBatVolt());
				metaData.put("onWire", avlData.getModbusData().getOnWire());
				vehicleEvent.setTags(metaData.toString());
				vehicleEvent.setEngine(false);
			} else {
				vehicleEvent.setEngine(true);
				JSONObject ioevent = new JSONObject();
				ioevent.put("oilPressure", avlData.getModbusData()
						.getOilPressure());
				ioevent.put("coolandTemperature", avlData.getModbusData()
						.getCoolandTemperature());
				ioevent.put("oilTemperature", avlData.getModbusData()
						.getOilTemperature());
				ioevent.put("fuelLeval", avlData.getModbusData().getFuelLeval());
				ioevent.put("chargeAlternatorVoltage", avlData.getModbusData()
						.getChargeAlternatorVoltage());
				ioevent.put("batteryVoltage", avlData.getModbusData()
						.getBatteryVoltage());
				ioevent.put("engineSpeed", avlData.getModbusData()
						.getEngineSpeed());
				ioevent.put("generatorFrequency", avlData.getModbusData()
						.getGeneratorFrequency());
				ioevent.put("genL1_N_V", avlData.getModbusData().getGenL1_N_V());
				ioevent.put("genL2_N_V", avlData.getModbusData().getGenL2_N_V());
				ioevent.put("genL3_N_V", avlData.getModbusData().getGenL3_N_V());
				ioevent.put("genL1_L2_V", avlData.getModbusData()
						.getGenL1_L2_V());
				ioevent.put("genL2_L3_V", avlData.getModbusData()
						.getGenL2_L3_V());
				ioevent.put("genL3_L1_V", avlData.getModbusData()
						.getGenL3_L1_V());
				ioevent.put("genL1C", avlData.getModbusData().getGenL1C());
				ioevent.put("genL2C", avlData.getModbusData().getGenL2C());
				ioevent.put("genL3C", avlData.getModbusData().getGenL3C());
				ioevent.put("genEarthC", avlData.getModbusData().getGenEarthC());
				ioevent.put("genL1W", avlData.getModbusData().getGenL1W());
				ioevent.put("genL2W", avlData.getModbusData().getGenL2W());
				ioevent.put("genL3W", avlData.getModbusData().getGenL3W());
				ioevent.put("genC_lag", avlData.getModbusData().getGenC_lag());
				ioevent.put("mainsFrequency", avlData.getModbusData()
						.getMainsFrequency());
				ioevent.put("mainsL1_N_V", avlData.getModbusData()
						.getMainsL1_N_V());
				ioevent.put("mainsL2_N_V", avlData.getModbusData()
						.getMainsL2_N_V());
				ioevent.put("mainsL3_N_V", avlData.getModbusData()
						.getMainsL3_N_V());
				ioevent.put("mainsL1L2_N_V", avlData.getModbusData()
						.getMainsL1L2_N_V());
				ioevent.put("mainsL2L3_N_V", avlData.getModbusData()
						.getMainsL2L3_N_V());
				ioevent.put("mainsL3L1_N_V", avlData.getModbusData()
						.getMainsL3L1_N_V());
				ioevent.put("mainsV_lag", avlData.getModbusData()
						.getMainsV_lag());
				ioevent.put("gen_P_R", avlData.getModbusData().getGen_P_R());
				ioevent.put("mains_P_R", avlData.getModbusData().getMains_P_R());
				ioevent.put("mainsC_lag", avlData.getModbusData()
						.getMainsC_lag());
				ioevent.put("mainsL1C", avlData.getModbusData().getMainsL1C());
				ioevent.put("mainsL2C", avlData.getModbusData().getMainsL2C());
				ioevent.put("mainsL3C", avlData.getModbusData().getMainsL3C());
				ioevent.put("mainsEarthC", avlData.getModbusData()
						.getMainsEarthC());
				ioevent.put("mainsL1W", avlData.getModbusData().getMainsL1W());
				ioevent.put("mainsL2W", avlData.getModbusData().getMainsL2W());
				ioevent.put("mainsL3W", avlData.getModbusData().getMainsL3W());

				ioevent.put("busC_lag", avlData.getModbusData().getBusC_lag());
				ioevent.put("busFrequency", avlData.getModbusData()
						.getBusFrequency());
				ioevent.put("busL1_N_V", avlData.getModbusData().getBusL1_N_V());
				ioevent.put("busL2_N_V", avlData.getModbusData().getBusL2_N_V());
				ioevent.put("busL3_N_V", avlData.getModbusData().getBusL3_N_V());
				ioevent.put("busL1L2_N_V", avlData.getModbusData()
						.getBusL1L2_N_V());
				ioevent.put("busL2L3_N_V", avlData.getModbusData()
						.getBusL2L3_N_V());
				ioevent.put("busL3L1_N_V", avlData.getModbusData()
						.getBusL3L1_N_V());
				ioevent.put("busL1C", avlData.getModbusData().getBusL1C());
				ioevent.put("busL2C", avlData.getModbusData().getBusL2C());
				ioevent.put("busL3C", avlData.getModbusData().getBusL3C());
				ioevent.put("busEarthC", avlData.getModbusData().getBusEarthC());
				if (avlData.getModbusData().getBusL1W() != null)
					ioevent.put("busL1W", avlData.getModbusData().getBusL1W());
				if (avlData.getModbusData().getBusL2W() != null)
					ioevent.put("busL2W", avlData.getModbusData().getBusL2W());
				if (avlData.getModbusData().getBusL3W() != null)
					ioevent.put("busL3W", avlData.getModbusData().getBusL3W());
				if (avlData.getModbusData().getBus_P_R() != null)
					ioevent.put("bus_P_R", avlData.getModbusData().getBus_P_R());

				ioevent.put("gen_tot_W", avlData.getModbusData().getGen_tot_W());
				ioevent.put("genL1VA", avlData.getModbusData().getGenL1VA());
				ioevent.put("genL2VA", avlData.getModbusData().getGenL2VA());
				ioevent.put("genL3VA", avlData.getModbusData().getGenL3VA());
				ioevent.put("gentotVA", avlData.getModbusData().getGentotVA());
				ioevent.put("genL1VAr", avlData.getModbusData().getGenL1VAr());
				ioevent.put("genL2VAr", avlData.getModbusData().getGenL2VAr());
				ioevent.put("genL3VAr", avlData.getModbusData().getGenL3VAr());
				ioevent.put("gentotVAr", avlData.getModbusData().getGentotVAr());
				ioevent.put("genPFL1", avlData.getModbusData().getGenPFL1());
				ioevent.put("genPFL2", avlData.getModbusData().getGenPFL2());
				ioevent.put("genPFL3", avlData.getModbusData().getGenPFL3());
				ioevent.put("genPFAvg", avlData.getModbusData().getGenPFAvg());
				ioevent.put("genFullPower", avlData.getModbusData()
						.getGenFullPower());
				ioevent.put("genFullVAr", avlData.getModbusData()
						.getGenFullVAr());
				ioevent.put("mains_tot_W", avlData.getModbusData()
						.getMains_tot_W());
				ioevent.put("mainsL1VA", avlData.getModbusData().getMainsL1VA());
				ioevent.put("mainsL2VA", avlData.getModbusData().getMainsL2VA());
				ioevent.put("mainsL3VA", avlData.getModbusData().getMainsL3VA());
				ioevent.put("mainstotVA", avlData.getModbusData()
						.getMainstotVA());
				ioevent.put("mainsL1VAr", avlData.getModbusData()
						.getMainsL1VAr());
				ioevent.put("mainsL2VAr", avlData.getModbusData()
						.getMainsL2VAr());
				ioevent.put("mainsL3VAr", avlData.getModbusData()
						.getMainsL3VAr());
				ioevent.put("mainstotVAr", avlData.getModbusData()
						.getMainstotVAr());
				ioevent.put("mainsPFL1", avlData.getModbusData().getMainsPFL1());
				ioevent.put("mainsPFL2", avlData.getModbusData().getMainsPFL2());
				ioevent.put("mainsPFL3", avlData.getModbusData().getMainsPFL3());
				ioevent.put("mainsPFAvg", avlData.getModbusData()
						.getMainsPFAvg());

				ioevent.put("genL1lag", avlData.getModbusData().getGenL1lag());
				ioevent.put("genL2lag", avlData.getModbusData().getGenL2lag());
				ioevent.put("genL3lag", avlData.getModbusData().getGenL3lag());
				ioevent.put("gentotlag", avlData.getModbusData().getGentotlag());
				ioevent.put("genL1FullPower", avlData.getModbusData()
						.getGenL1FullPower());
				ioevent.put("genL2FullPower", avlData.getModbusData()
						.getGenL2FullPower());
				ioevent.put("genL3FullPower", avlData.getModbusData()
						.getGenL3FullPower());

				ioevent.put("currentTime", avlData.getModbusData()
						.getCurrentTime());
				ioevent.put("timeToNextEngineMainatenance", avlData
						.getModbusData().getTimeToNextEngineMainatenance());
				ioevent.put("timeOfNextEngineMainatenance", avlData
						.getModbusData().getTimeOfNextEngineMainatenance());
				ioevent.put("engineRunTime", avlData.getModbusData()
						.getEngineRunTime());
				ioevent.put("genPositiveKWH", avlData.getModbusData()
						.getGenPositiveKWH());
				ioevent.put("genNegativeKWH", avlData.getModbusData()
						.getGenNegativeKWH());
				ioevent.put("genKVAH", avlData.getModbusData().getGenKVAH());
				ioevent.put("genKVArH", avlData.getModbusData().getGenKVArH());
				ioevent.put("numberOfStart", avlData.getModbusData()
						.getNumberOfStart());
				ioevent.put("mainsPositiveKWH", avlData.getModbusData()
						.getMainsPositiveKWH());
				ioevent.put("mainsNegativeKWH", avlData.getModbusData()
						.getMainsNegativeKWH());
				ioevent.put("mainsKVAH", avlData.getModbusData().getMainsKVAH());
				ioevent.put("mainsKVArH", avlData.getModbusData()
						.getMainsKVArH());
				ioevent.put("busPositiveKWH", avlData.getModbusData()
						.getBusPositiveKWH());
				ioevent.put("busNegativeKWH", avlData.getModbusData()
						.getBusNegativeKWH());
				ioevent.put("busKVAH", avlData.getModbusData().getBusKVAH());
				ioevent.put("busKVArH", avlData.getModbusData().getBusKVArH());
				ioevent.put("fuelUsed", avlData.getModbusData().getFuelUsed());
				ioevent.put("maxPositiveMains_ROCOF", avlData.getModbusData()
						.getMaxPositiveMains_ROCOF());
				ioevent.put("maxNegativeMains_ROCOF", avlData.getModbusData()
						.getMaxNegativeMains_ROCOF());
				ioevent.put("maxPositiveMains_Vector", avlData.getModbusData()
						.getMaxPositiveMains_Vector());
				ioevent.put("maxNegativeMains_Vector", avlData.getModbusData()
						.getMaxNegativeMains_Vector());
				ioevent.put("timeToNextEngineMainatenanceAlerm1", avlData
						.getModbusData()
						.getTimeToNextEngineMainatenanceAlerm1());
				ioevent.put("timeOfNextEngineMainatenanceAlerm1", avlData
						.getModbusData()
						.getTimeOfNextEngineMainatenanceAlerm1());
				ioevent.put("timeToNextEngineMainatenanceAlerm2", avlData
						.getModbusData()
						.getTimeToNextEngineMainatenanceAlerm2());
				ioevent.put("timeOfNextEngineMainatenanceAlerm2", avlData
						.getModbusData()
						.getTimeOfNextEngineMainatenanceAlerm2());
				ioevent.put("timeToNextEngineMainatenanceAlerm3", avlData
						.getModbusData()
						.getTimeToNextEngineMainatenanceAlerm3());

				ioevent.put("alarm", avlData.getModbusData().getAlarm());

				vehicleEvent.setIoevent(ioevent.toString());
			}
		} catch (Exception e) {
			LOGGER.error("DeepSeaDeviceProtocolHandlerV2: PreparevehicleEvents:"
					+ e);
			e.printStackTrace();
		}

		return vehicleEvent;
	}

	private void sendAirCommand(VehicleComposite vehicleComposite, int ref) {
		DataOutputStream clientSocketOut = null;
		DataInputStream clientSocketIn = null;
		try {

			clientSocketOut = new DataOutputStream(
					clientSocket.getOutputStream());

			JSONArray packetJSONArray = null;
			if (vehicleComposite.getVehicle().getPacketHex() != null) {
				packetJSONArray = new JSONArray(vehicleComposite.getVehicle()
						.getPacketHex());
				configCnt.put(vehicleComposite.getVehicle().getVin(),
						packetJSONArray.length());
			}

			if (packetJSONArray != null && ref < packetJSONArray.length()) {

				String packet = String.valueOf(packetJSONArray.get(ref));
				clientSocketOut.write(packet.getBytes(), 0, packet.length());
				LOGGER.error(packet);
				Thread.sleep(5000);
				/*
				 * if (commandStatus == null) { Thread.sleep(60000);
				 * sendAirCommand(vehicleComposite, ref); // commandStatus =
				 * null; }
				 */
				LOGGER.error(packetJSONArray.length());

			}
			if (ref == packetJSONArray.length()) {
				commandStatus = null;
			}

		} catch (Exception e) {
			// TODO Auto-generated catch block
			LOGGER.error("SendCommand : " + e);

		}
	}

	public void checkConfigDataLength(String imei) {
		try {
			VehicleComposite vehicleComposite = fleetTrackingDeviceListenerBO
					.getVehicle(imei);

			if (vehicleComposite.getVehicle().getPacketHex() != null) {

				sendAirCommand(vehicleComposite, 0);
			}

		} catch (Exception e) {
			LOGGER.error("SendCommand : " + e);
		}
	}

	public String sendGPRsCommand(String imei, String coomand,
			Socket DeepseaDeviceSocket) {
		String status = null;

		try {
			DataOutputStream out = new DataOutputStream(
					DeepseaDeviceSocket.getOutputStream());
			out.write(coomand.getBytes(), 0, coomand.length());
		} catch (Exception e) {
			LOGGER.error("SendCommand : " + e);
		}
		return status;
	}

	public String sendWriteCommand(String imei, String slaveId, String command,
			Socket DeepseaDeviceSocket) {
		String result = null;
		try {
			DataOutputStream out = new DataOutputStream(
					DeepseaDeviceSocket.getOutputStream());
			String writeCommand = "<WRITE" + "," + imei + "," + slaveId + ","
					+ command + ";";
			out.write(writeCommand.getBytes(), 0, writeCommand.length());
			LOGGER.error("SendCommand : " + writeCommand);
			int i = 0;
			while (i < 120) {
				if (commandStatus != null) {
					LOGGER.error("status  ommand : " + commandStatus);
					result = commandStatus;
				} else {
					Thread.sleep(1000);
				}
				i++;
			}
		} catch (Exception e) {
			LOGGER.error("SendCommand : " + e);
		}
		return result;
	}
}
